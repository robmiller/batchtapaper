#!/usr/bin/env ruby

require "net/http"
require "net/https"
require "uri"

API_URL = URI.parse("https://www.instapaper.com/api/add")

# Fetch our URLs; either from the files given in the arguments, or from
# STDIN.
lines = ARGF.read

unless lines
	puts "No URLs specified."
	exit
end

lines = lines.split("\n")

# First, attempt to read usernames and passwords from the
# ~/.instapaperrc file.
rcfile = File.expand_path("~/.instapaperrc")
if File.exists? rcfile
	username, password = IO.read(rcfile).split("\n")
end

if !username && !STDIN.tty?
	# If we haven't got a username from the rc file, and we're reading input
	# from STDIN, then we're out of luck; we can't proceed.
	puts "When passing URLs via STDIN, you must have an ~/.instapaperrc file containing your auth details."
	exit
elsif !username && STDIN.tty?
	# If we do have a TTY (if the URLs are in a file), then we can prompt
	# the user for their auth details.
	begin
		print "Email or username: "
		username = STDIN.gets.chomp

		print "Password (if you have one): "
		# We don't want to echo input when the user is entering their
		# password, to prevent shoulder surfing; so, we disable the
		# terminal's echo temporarily.
		system 'stty -echo'
		password = STDIN.gets.chomp
		system 'stty echo'
	rescue NoMethodError, Interrupt
		# In case the user interrupts when typing their password, we don't
		# want to leave them with a terminal that isn't echoing.
		system 'stty echo'
		exit
	end

	puts "\n\n"
end

# Grab the lines of the file
lines.each do |line|
	line.strip!

	# If the line contains a tab, then assume it's in "URL[tab]title" format
	if line =~ /\t/
		url, title = line.split("\t")
	else
		url = line
	end

	# Attempt to parse the URL that we've been given.
	begin
		url = URI.parse(url)
	rescue
		puts "#{url} doesn't seem to be a valid URL. Moving on..."
		continue
	end

	print "Processing URL: #{url}..."

	post = { 'username' => username, 'password' => password, 'url' => url.to_s }
	if title
		post['title'] = title
	end

	# We need to use this slightly more verbose syntax, rather than just
	# Net::HTTP::post_form, because the Instapaper API uses SSL.
	request = Net::HTTP::Post.new(API_URL.path)
	request.set_form_data(post)

	sock = Net::HTTP.new(API_URL.host, API_URL.port)
	sock.use_ssl = true
	response = sock.start { |http| http.request(request) }

	# The Instapaper API will return a 403 error for any request if the
	# given username and password are wrong.
	if response.code == 403
		puts "Username/password incorrect."
		exit
	end
	
	# We can fairly reasonably assume that any other request is valid.
	print " Got response #{response.code}\n"

	sleep 1
end
